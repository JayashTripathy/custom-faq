// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Faq           Faq[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Faq {
    id           String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
    title        String  @unique
    description  String?
    logo         String?
    backdrop     String?
    organization String?
    address      String?
    aiMode       Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    User      User?     @relation(fields: [userId], references: [id])
    userId    String?
    theme     String?
    faqs      FaqItem[]
    socials   Social[]

    @@unique([title, userId])
}

model FaqItem {
    id       Int    @id @default(autoincrement())
    question String
    answer   String

    faqId String? @db.Uuid
    faq   Faq?    @relation(fields: [faqId], references: [id])

    @@unique([question, answer, faqId])
}

model Social {
    id   String @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
    name String
    url  String

    faqId String? @db.Uuid
    faq   Faq?    @relation(fields: [faqId], references: [id])
}

model Embeddings {
    id      String                 @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
    content String
    vector  Unsupported("vector")?
}
